#!/usr/bin/env python

import sys
import os
import ConfigParser
import poms_client
import json
import logging
import argparse

class uploader:

    def __init__(self, cfgfile, args):
        self.cfg = ConfigParser.SafeConfigParser()
        self.cfg.optionxform = str
        self.cfg.read(cfgfile)
        if self.cfg.has_section('global'):
            self.cfg_globals = dict(self.cfg.items('global'))
        else:
            self.cfg_globals = dict()

        role = args.poms_role
        if self.cfg_get('global','poms_role'):
            role = self.cfg_get('global','poms_role') 

        poms_client.update_session_role(role)

    def cfg_get(self,section,item):
        try:
            return self.cfg.get(section,item,vars=self.cfg_globals)
        except ConfigParser.NoOptionError:
            return None
        except ConfigParser.NoSectionError:
            return None

    def upload_wf(self, testflag = None):
        cfg_stages = self.cfg_get('campaign','campaign_stage_list').split()
        cfg_jobtypes = set()
        cfg_launches = set()
        print("here")
        for s in cfg_stages:
            cfg_jobtypes.add(self.cfg_get('campaign_stage %s'%s, 'job_type'))
            cfg_launches.add(self.cfg_get('campaign_stage %s'%s, 'launch_template'))
            
        for l in cfg_launches:
            self.upload_launch_template(l, testflag)
        for jt in cfg_jobtypes:
            self.upload_jobtype(jt, testflag)
        for s in cfg_stages:
            self.upload_stage(s, testflag)

        self.tag_em(self.cfg_get('campaign','tag'), cfg_stages, testflag)


    def tag_em(self, tag, cfg_stages, testflag = False):
        cname_id_map = poms_client.get_campaign_list(test_client=testflag)
        print("got map: %s" % repr(cname_id_map))
        cids = map((lambda x:str(cname_id_map[x])), cfg_stages)
        poms_client.tag_campaigns(tag = tag, cids = ','.join(cids), experiment=self.cfg_get('campaign','experiment'), test_client = testflag)

    def upload_jobtype(self,jt, testflag = None):
        field_map = {
            'launch_script':'launch_script',
            'parameters':'def_parameter',
            'output_file_patterns':'output_file_patterns',
        }
        d=dict(self.cfg.items('job_type %s'%jt))
        print( "I should upload jt %s" % jt)
        print(repr(d))
        args = {
            'action': 'add', 
            'name': jt, 
            'experiment': self.cfg_get('campaign','experiment'), 
            'pc_username': os.environ['USER'],
            'test_client': testflag,
        }
        for k in d.keys():
            args[field_map.get(k,k)] = d[k]
        # lauch script wants a list(?)
        args['launch_script'] = [args['launch_script']]
        args['def_parameter'] =  json.loads(args['def_parameter'])
        print("args:%s" % repr(args))
        poms_client.campaign_definition_edit(**args)

    def upload_launch_template(self,lt, testflag = None):
        field_map = {
            'host': 'launch_host',
            'account': 'user_account',
            'setup': 'launch_setup',
        }
        d = dict(self.cfg.items('launch_template %s' % lt))
        print( "I should upload lt %s" % lt)
        print( repr(d))
        args = {
             'action': 'add', 
             'launch_name': lt, 
             'experiment': self.cfg_get('campaign','experiment'), 
             'pc_username': os.environ['USER'],
             'test_client': testflag,
        }
        for k in d.keys():
            args[field_map.get(k,k)] = d[k]
        # launch_setup wants a list(?)
        args['launch_setup'] = [ args['launch_setup'] ]
        poms_client.launch_template_edit(**args)
        
    def upload_stage(self,st, testflag = None):
        field_map = {
            'dataset': 'dataset',
            'software_version': 'ae_software_version',
            'vo_role': 'vo_role',
            'cs_split_type': 'ae_split_type',
            'job_type': 'ae_campaign_definition',
            'launch_template': 'ae_launch_name',
            'param_overrides': 'ae_param_overrides',
            'completion_type': 'ae_completion_type',
            'completion_pct': 'ae_completion_pct',
        }
        deps = {"file_patterns":[], "campaigns":[]}
        for i in range(1,10):
            dst = self.cfg_get('dependencies %s' % st, 'campaign_stage_%d'%i)
            if dst:
                pat = self.cfg_get('dependencies %s' % st, 'file_pattern_%d'%i)
                deps["campaigns"].append(dst)
                deps["file_patterns"].append(pat)
        d=dict(self.cfg.items('campaign_stage %s'%st))
        print( "I should upload s %s" % st)
        print( repr(d))
        print( "deps: %s" % repr(deps))
        args = {
            'action': 'add', 
            'ae_campaign_name': st,  
            'experiment': self.cfg_get('campaign','experiment'), 
            'ae_active': True, 
            'ae_depends': json.dumps(deps),
            'pc_username' : os.environ['USER']
        }
        args['test_client'] = testflag
        for k in d.keys():
            args[field_map.get(k,k)] = d[k]
        print("args:%s" % repr(args))
        poms_client.campaign_edit(**args)

if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG)

    parser = argparse.ArgumentParser(description='Optional arguments edit campaign')
    parser.add_argument('--test', type=bool, help='use to test the client URL query', default = 'False')
    parser.add_argument('--poms_role', type=str, help='use to test the client URL query', default = 'production')
    args = parser.parse_args()

    if args.test:
        testflag = True
        sys.argv.pop(1)

    u=uploader(sys.argv[1], args)
    u.upload_wf(testflag)

