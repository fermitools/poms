#!/usr/bin/env python
#from test_pipe import campaign_definition_edit_test
from poms_client import campaign_definition_edit
import argparse
#Creating the arguments
parser = argparse.ArgumentParser(description='Optional Arguments edit campaign definition')
groupArg = parser.add_argument_group('Require Arguments')
#parser.add_argument('--action', metavar='add-edit-delete', type=str, help='you should choose between add, edit or delete', default = None)
groupArg.add_argument('--action', metavar='add-edit-delete', type=str, help='you should choose between add, edit or delete', required = True)
groupArg.add_argument('--name', metavar='Name of your template', type=str, help='the name of the campaign definition', required = True, default = None)
groupArg.add_argument('--email', metavar='your email', type=str, help='Please provide your email adress, the one you use when you get register at POMS', required = True, default = None)
groupArg.add_argument('--experiment', metavar='Experiment', type=str, help='The experiment this submission belong', required = True, default = None)
parser.add_argument('--input_files_per_job', metavar='number of input files per job', type=int, help='set the number of input files you would like to process per job', default = 0)
parser.add_argument('--output_files_per_job', metavar='number of output files per job', type=int, help='set the number of output files you expected from each input file ', default = 0)
parser.add_argument('--output_file_patterns', metavar='string with output file pattern', type=str, help='The output pattern you are interested in your campaign (eg. \%\.root)', default = None)
parser.add_argument('--launch_script', metavar='the setup you do at your interactive node', type=str, help='the script that you run to submit jobs in your machine', default = None)
parser.add_argument('--def_parameter', metavar='parameters pass to the launch_script', type=str, nargs='*', help='The arguments your script (included in Launch script) use for the submission', default = "")
parser.add_argument('--test_client', metavar='want to test the client URL query', type=str, nargs=str, help='use to test the client URL query', default = False)
args = parser.parse_args()
#parser.print_help()
print args
print 'The arguments you pass are:'
print 'action =',args.action
print 'name =', args.name
print 'email=',args.email
print 'experiment=',args.experiment
print 'input_files_per_job=', args.input_files_per_job
print 'output_files_per_job=', args.output_files_per_job
print 'output_file_patterns=', args.output_file_patterns
print 'launch_script=', args.launch_script
print 'def_parameter=', args.def_parameter
print 'test_client=', args.test_client


#Calling the poms_client.campaign_definition_edit'
if action in ['add','delete','edit']:
    campaign_definition_edit(pc_email=args.email,
                        action = args.action,
                        name=args.name,
                        experiment=args.experiment,
                        input_files_per_job=args.input_files_per_job,
                        output_files_per_job=args.output_files_per_job,
                        output_file_patterns=args.output_file_patterns,
                        launch_script=args.launch_script,
                        def_parameter=args.def_parameter,
                        test_client=args.test_client)
else:
    msg = "ERROR: the action you choose was [action="+action+"] you must use add-edit-delete as option"
    raise ArgumentParser.error(msg)




'''
campaign_definition_edit_test(pc_email=args.email,
                    action = args.action,
                    name=args.name,
                    experiment=args.experiment,
                    input_files_per_job=args.input_files_per_job,
                    output_files_per_job=args.output_files_per_job,
                    output_file_patterns=args.output_file_patterns,
                    launch_script=args.launch_script,
                    def_parameter=args.def_parameter)
'''
