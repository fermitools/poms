#!/bin/sh
import requests
import logging
import os


def experiment_list():
    resp = rs.get('http://localhost:8080/poms/experiment_list')
    e_l = resp.json()
    resp.close()
    print("instead of %s returning samdev for debugging" % repr(e_l))
    return ['samdev']
    return e_l

def campaign_stage_datasets():
    resp = rs.get('http://localhost:8080/poms/campaign_stage_datasets')
    a_m = resp.json()
    resp.close()
    return a_m

def create_definition(exp, defname, dims):
    data = {'defname' : defname, 'dims': dims , 'group':'exp', 'user':'poms'}
    logging.debug('definitions/create: data: %s' % repr(data))
    resp = rs.post("https://samweb.fnal.gov:8483/sam/%s/api/definitions/create" % exp, data = data  )
    print(resp.text)

def describe_definition(exp, defname):
    resp = rs.get("http://samweb.fnal.gov:8480/sam/%s/api/definitions/name/%s/?format=json" % (exp, defname))
    d_d = resp.json()
    resp.close()

def delete_definition(exp, defname):
    resp = rs.delete("https://samweb.fnal.gov:8483/sam/%s/api/definitions/name/%s" % (exp, defname))
    print(resp.text)

def campaign_stage_actives(exp):
    resp = rs.get('http://samweb.fnal.gov:8480/sam/%s/api/definitions/list?defname=poms_campaign_stage_active_%%&format=json' % exp)
    c_s_a = resp.json()
    resp.close()
    return c_s_a
    

def update_them():


    saw = {}
    activemap = campaign_stage_datasets()
    for exp in experiment_list():

        current_defs = campaign_stage_actives(exp)

        for c_d in current_defs:
            defname = c_d['defname']
            c_s_id = int(defname[27:])
            saw[c_s_id] = True

            if c_s_id in activemap:
                 plist = ','.join(activemap[c_s_id][1])
                 if plist[-1] == ',':
                     plist = plist[:-1]
                 wanted = "project_name %s" % plist 
                 has = describe_definition(exp, c_d['defname'])['dimensions']
                 if dimensions != wanted:
                     delete_definition(exp, defname)
                     create_definition(exp, defname, wanted)
            else:
                 delete_definition(exp, defname)

    for c_s_id in activemap:
        if not saw.get(c_s_id,False):
             wanted = "project_name in %s" % ','.join(activemap[c_s_id][1])
             defname = "poms_campaign_stage_active_%s" % c_s_id
             create_definition(exp, defname, wanted)

# setup session with cert authentication...

cert="%s/private/gsi/pomscert.pem" % os.environ['HOME']
key="%s/private/gsi/pomskey.pem" % os.environ['HOME']
rs = requests.Session()
rs.cert = (cert, key)
rs.verify = False

logging.basicConfig(level=logging.DEBUG)
requests_log = logging.getLogger("requests.packages.urllib3")
requests_log.setLevel(logging.DEBUG)
requests_log.propagate = True

update_them()
